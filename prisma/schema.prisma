// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  level         CourseLevel @default(FIRST_YEAR)
  courses       Course[]
  quizzes       Quiz[]
  enrollments   Enrollment[]
  quizEnrollments QuizEnrollment[]
  lessonProgress LessonProgress[]
  isAdmin       Boolean     @default(false)
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id               String    @unique   @id @default(uuid())
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            CourseLevel  @default(FIRST_YEAR)
  category         String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  smallDescription String
  slug             String       @unique
  status           CourseStatus @default(DRAFT)


  chapters Chapter[]
  enrollments Enrollment[]
  userId   String
  user     User      @relation(fields: [userId], references: [id])
}

enum CourseLevel {
  FIRST_YEAR
  SECOND_YEAR
  THIRD_YEAR
  FOURTH_YEAR
  FIFTH_YEAR
  SIXTH_YEAR
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson   Lesson[]
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Lesson {
  id           String   @id @default(uuid())
  title        String
  description  String?
  position     Int
  thumbnailKey String?
  videoKey     String?
  chapterId    String
  chapter      Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  progress     LessonProgress[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("lesson")
}

model Quiz {
  id        String   @id @default(uuid())
  title     String
  description String
  fileKey          String
  price            Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug             String       @unique
  status           CourseStatus @default(DRAFT)
  
  level            CourseLevel  @default(FIRST_YEAR)
  category         String
  quizEnrollments QuizEnrollment[]
  userId   String
  user     User      @relation(fields: [userId], references: [id])

  qcm      Qcm[]    // <- quizzes live here

  @@map("quiz")
}

model Qcm {
  id        String       @id @default(uuid())
  question  String
  answers   QcmAnswer[]  // <- answers live here
  position         Int
  
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("qcm")
}

model QcmAnswer {
  id        String  @id @default(uuid())
  text      String  // the answer text
  isCorrect Boolean @default(false)
  position  Int     // to keep A/B/C/D ordering

  qcmId String
  qcm   Qcm     @relation(fields: [qcmId], references: [id], onDelete: Cascade)

  @@unique([qcmId, position])  // one row per position
  @@map("qcm_answer")
}


model Enrollment {
  id        String   @id @default(uuid())
  amount    Int
  status    String   @default("PENDING")
  transactionId String? @unique 
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("enrollment")
} 

model QuizEnrollment {
  id        String   @id @default(uuid())
  amount    Int
  status    String   @default("PENDING")
  transactionId String? @unique 
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, quizId])
  @@map("quiz_enrollment")
} 



model LessonProgress {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}